class MyCircularQueue {
public:
int *data;
int f,r,nexte,size,cap;
MyCircularQueue(int k) {
    data = new int[k];
    f = -1;
    r = -1;
    nexte = 0;
    size = 0;
    cap = k;
}

bool enQueue(int value) {
    if(size == cap) {
        return false;
    }
    
    data[nexte] = value;
    r = nexte;
    nexte = (nexte + 1) % cap;
    if(f== -1) {
        f = 0;
    }
    size++;
    return true;
}

bool deQueue() {
    if(size == 0) {
        return false;
    }
    f = (f+1)%cap;
    size--;
    if(size == 0) {
        f = -1;
        nexte = 0;
        r = -1;
    }
    return true;
}

int Front() {
    if(f  == -1) {
        return -1;
    }
    return data[f];
}

int Rear() {
    if(r == -1) {
        return -1;
    }
    return data[r];
}

bool isEmpty() {
    return size == 0;
}

bool isFull() {
    return size == cap;
}
};
